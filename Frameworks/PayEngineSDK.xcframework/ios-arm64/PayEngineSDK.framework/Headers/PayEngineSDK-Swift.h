#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef PAYENGINESDK_SWIFT_H
#define PAYENGINESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import PassKit;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PayEngineSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Represents the supported Apple Pay payment networks.
typedef SWIFT_ENUM(NSInteger, ApplePayPaymentNetwork, open) {
/// Supported Apple Pay payment networks.
  ApplePayPaymentNetworkAmex = 0,
  ApplePayPaymentNetworkCartesBancaires = 1,
  ApplePayPaymentNetworkDiscover = 2,
  ApplePayPaymentNetworkEftpos = 3,
  ApplePayPaymentNetworkElectron = 4,
  ApplePayPaymentNetworkElo = 5,
  ApplePayPaymentNetworkIdCredit = 6,
  ApplePayPaymentNetworkInterac = 7,
  ApplePayPaymentNetworkJCB = 8,
  ApplePayPaymentNetworkMada = 9,
  ApplePayPaymentNetworkMaestro = 10,
  ApplePayPaymentNetworkMasterCard = 11,
  ApplePayPaymentNetworkPrivateLabel = 12,
  ApplePayPaymentNetworkQuicPay = 13,
  ApplePayPaymentNetworkSuica = 14,
  ApplePayPaymentNetworkVisa = 15,
  ApplePayPaymentNetworkVPay = 16,
};

@class PKPaymentSummaryItem;
@class NSString;
@class PKShippingMethod;

/// A class that represents an Apple Pay payment request.
SWIFT_CLASS("_TtC12PayEngineSDK22ApplePayPaymentRequest")
@interface ApplePayPaymentRequest : NSObject
/// Configures the <code>ApplePayPaymentRequest</code> object to prepare for an Apple Pay transaction.
/// Use this method to set up the necessary details for an Apple Pay request, including the payment items, total amount, currency, and required contact fields.
/// This method initializes the payment details and configures the Apple Pay request accordingly.
/// \param paymentItems An array of <code>PKPaymentSummaryItem</code> representing the items to be displayed in the Apple Pay sheet. Defaults to an empty array.
///
/// \param paymentAmount The total amount to be collected in the transaction.
///
/// \param currencyCode The currency code for the transaction. Defaults to <code>"USD"</code>.
///
/// \param requiredBillingContactFields A set of <code>PKContactField</code> values specifying the required billing contact fields. Defaults to an empty set.
///
/// \param requiredShippingContactFields A set of <code>PKContactField</code> values specifying the required shipping contact fields. Defaults to an empty set.
///
/// \param shippingMethods An array of <code>PKShippingMethod</code> representing the available shipping options. Defaults to an empty array .
///
- (void)buildWithPaymentItems:(NSArray<PKPaymentSummaryItem *> * _Nonnull)paymentItems paymentAmount:(double)paymentAmount currencyCode:(NSString * _Nonnull)currencyCode requiredBillingContactFields:(NSSet<PKContactField> * _Nonnull)requiredBillingContactFields requiredShippingContactFields:(NSSet<PKContactField> * _Nonnull)requiredShippingContactFields shippingMethods:(NSArray<PKShippingMethod *> * _Nonnull)shippingMethods;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the Apple Pay eligibility status for the current device and user.
typedef SWIFT_ENUM(NSInteger, ApplePayStatus, open) {
/// The current device/user has Apple pay activated and a card belongs to the given payment networks
  ApplePayStatusEligible = 0,
/// The current device/user has Apple pay activated but has no card belongs to the given payment networks
  ApplePayStatusNeedSetup = 1,
/// The current device/user cannot use Apple pay from Apple
  ApplePayStatusNotEligible = 2,
};


/// Represents the details of a bank account.
/// This class stores essential bank account information such as routing number,
/// last four digits of the account number, and the account holder’s name.
SWIFT_CLASS("_TtC12PayEngineSDK15BankAccountData")
@interface BankAccountData : NSObject
/// The bank’s routing number.
@property (nonatomic, readonly, copy) NSString * _Nonnull routingNumber;
/// The last four digits of the bank account number.
@property (nonatomic, readonly, copy) NSString * _Nonnull last4;
/// The first name of the account holder.
@property (nonatomic, readonly, copy) NSString * _Nonnull firstName;
/// The last name of the account holder.
@property (nonatomic, readonly, copy) NSString * _Nonnull lastName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the details of a payment card.
/// This class stores essential card information such as brand, last four digits,
/// expiration date, and the cardholder’s name.
SWIFT_CLASS("_TtC12PayEngineSDK8CardData")
@interface CardData : NSObject
/// The unique identifier for the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The brand of the card (e.g., Visa, MasterCard).
@property (nonatomic, readonly, copy) NSString * _Nonnull brand;
/// The last four digits of the card number.
@property (nonatomic, readonly, copy) NSString * _Nonnull last4;
/// The expiration month of the card.
@property (nonatomic, readonly) NSInteger expMonth;
/// The expiration year of the card.
@property (nonatomic, readonly) NSInteger expYear;
/// The name of the cardholder.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The ZIP code associated with the card’s billing address (optional).
@property (nonatomic, readonly, copy) NSString * _Nullable addressZip;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class PEBankAccount;
@class NSCoder;

/// A secure view for entering a customer’s bank account information safely.
/// This view displays input fields required to securely collect bank account details.
/// It also provides methods to validate the provided information and saving a customer’s bank acount by securely storing the information in PayEngine’s system.
/// This view complies with PCI standards and does not store data locally.
/// Instead, it forwards the information to a PCI-compliant third party, which encrypts and transfers the bank account details to PayEngine’s system.
/// In addition to the required fields that the view sets up for you, you can also pass additional fields and specify whether they are required.
/// <h2>How It Works</h2>
/// Call the <code>PayEngine/createBankAccountView(additionalFields:completion:)-3gn3i</code> method on the <code>PayEngine</code> object to obtain an instance of <code>IBankAccountView</code>. You can also include additional fields if needed.
/// Use the <code>validate()</code> method to check if all fields pass validation.
/// Once all fields are valid, call the <code>createBankAccount(merchantId:completion:)</code> method to save the bank account in the PayEngine system.
/// <h2>Usage Example</h2>
/// \code
/// payengine.createBankAccountView(additionalFields: []) { [unowned self] result in
///     switch result {
///     case .success(let view): // This is where you get the `IBankAccountView` instance
///         DispatchQueue.main.async {
///             self.secureField = view
///             self.stackView.spacing = 20
///             self.stackView.addArrangedSubview(self.secureField)
///
///             let button = UIButton(type: .system)
///             button.setTitle("Create Bank Account", for: .normal)
///
///             // Register tap action, which will send the createBankAccount request
///             button.addTarget(self, action: #selector(self.onButtonTap), for: .touchUpInside)
///
///             self.stackView.addArrangedSubview(button)
///         }
///
///     case .failure(let error):
///         debugPrint("Error: \(error)")
///     }
/// }
///
/// @objc func onButtonTap() {
///     secureField.createBankAccount(merchantId: MERCHANT_ID) { [unowned self] result in
///         switch result {
///         case .success(let data):
///             let alert = UIAlertController(
///                 title: "Bank Account Created",
///                 message: data.token,
///                 preferredStyle: .alert
///             )
///             alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
///             self.present(alert, animated: true, completion: nil)
///
///         case .failure(let error):
///             debugPrint("Error: \(error)")
///         }
///     }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC12PayEngineSDK16IBankAccountView")
@interface IBankAccountView : UIStackView
/// After the user has entered and validated their bank accoount information, this method can be called to save the bank account in the PayEngine system.
/// \param merchantId Your merchant’s ID.
///
/// \param additionalData Additional data to be included along with the bank account information.
///
/// \param completion Callback that provides an instance of the newly created <code>PEBankAccount</code> object.
///
/// \param failure Callback that returns an error if the request fails.
///
- (void)createBankAccountWithMerchantId:(NSString * _Nullable)merchantId additionalData:(NSDictionary<NSString *, id> * _Nonnull)additionalData completion:(void (^ _Nonnull)(PEBankAccount * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PECard;

/// A secure view for entering a customer’s payment card information safely.
/// This view displays input fields required to securely collect payment card details.
/// It also provides methods to validate the provided information and saving a customer’s card by securely storing the information in PayEngine’s system.
/// This view complies with PCI standards and does not store data locally.
/// Instead, it forwards the information to a PCI-compliant third party, which encrypts and transfers the card details to PayEngine’s system.
/// In addition to the required fields that the view sets up for you, you can also pass additional fields and specify whether they are required.
/// <h2>How It Works</h2>
/// Call the <code>PayEngine/createSecureView(additionalFields:completion:)-5x9ky</code> method on the <code>PayEngine</code> object to obtain an instance of <code>ICardNumberView</code>. You can also include additional fields if needed.
/// Use the <code>validate()</code> method to check if all fields pass validation.
/// Once all fields are valid, call the <code>createCard(merchantId:completion:)</code> method to save the card in the PayEngine system.
/// <h2>Usage Example</h2>
/// \code
/// let zipField = PEField(
///     name: "address_zip",
///     type: "text",
///     placeholder: "Zip code",
///     isRequired: true,
///     keyboardType: .alphabet,
///     pattern: #"^(?:\d{5}(?:-\d{4})?|[ABCEGHJKLMNPRSTVXY]\d[A-Z] ?\d[A-Z]\d)$"#
/// )
///
/// payengine.createSecureView(additionalFields: [zipField]) { [unowned self] result in
///     switch result {
///     case .success(let view): // This is where you get the `ICardNumberView` instance
///         DispatchQueue.main.async {
///             self.secureField = view
///             self.stackView.spacing = 20
///             self.stackView.addArrangedSubview(self.secureField)
///
///             let button = UIButton(type: .system)
///             button.setTitle("Create Card", for: .normal)
///
///             // Register tap action, which will send the createCard request
///             button.addTarget(self, action: #selector(self.onButtonTap), for: .touchUpInside)
///             self.stackView.addArrangedSubview(button)
///         }
///
///     case .failure(let error):
///         debugPrint("Error: \(error)")
///     }
/// }
///
/// @objc func onButtonTap() {
///     let additionalData = ["test_data": true]
///
///     secureField.createCard(merchantId: MERCHANT_ID, additionalData: additionalData) { [unowned self] result in
///         switch result {
///         case .success(let data):
///             let alert = UIAlertController(
///                 title: "Card Created",
///                 message: data.token,
///                 preferredStyle: .alert
///             )
///             alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
///
///             self.present(alert, animated: true, completion: nil)
///             self.cardToken = data.token
///
///             debugPrint("Card token: \(data.token)")
///             self.saleButton.isHidden = false
///
///         case .failure(let error):
///             debugPrint("Error: \(error)")
///         }
///     }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC12PayEngineSDK15ICardNumberView")
@interface ICardNumberView : UIStackView
/// After the user has entered and validated their card information, this method can be called to save the card in the PayEngine system.
/// \param merchantId Your merchant’s ID.
///
/// \param additionalData Additional data to be included along with the card information.
///
/// \param completion Callback that provides an instance of the newly created <code>PECard</code> object.
///
/// \param failure Callback that returns an error if the request fails.
///
- (void)createCardWithMerchantId:(NSString * _Nullable)merchantId additionalData:(NSDictionary<NSString *, id> * _Nonnull)additionalData completion:(void (^ _Nonnull)(PECard * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEApplePayDelegate;
@class UIButton;

/// A class that facilitates Apple Pay transactions.
/// <blockquote>
/// Important: Making the object for this class is not allowed. The shared instance of this class provides methods to configure and initiate Apple Pay payments. The shared instance is managed internally and you don’t need to access it directly.
///
/// </blockquote>
/// When you call the <code>PayEngine/setupApplePay(merchantId:completion:)</code> the shared instance gets returned to you in a completion callback.
/// Once you get the shared instance call this method <code>setupApplePayButton(for:type:style:)</code> to get a <code>UIButton</code> that triggers the Apple Pay payment flow when tapped.
/// <h2>Usage Example</h2>
/// \code
/// // The payengineSDK instance
/// let payengine = PayEngine(config: CONFIG)
/// payengine.setupApplePay(merchantId: "Your merchant's id") { result in
///     switch result {
///     case .success(let applePay): // This is where you get the singleton instance of `PEApplePay`
///         applePay.delegate = self
///
///         let request = ApplePayPaymentRequest()
///         request.build(
///             paymentItems: [],
///             paymentAmount: 1.0,
///             currencyCode: "USD",
///             requiredBillingContactFields: [.name, .postalAddress],
///             requiredShippingContactFields: [.name, .emailAddress, .postalAddress],
///             shippingMethods: shippingMethods
///         )
///
///         DispatchQueue.main.async {
///             if let applePayButton = applePay.setupApplePayButton(for: request, type: .checkout) {
///                 // Add this button to your view hierarchy.
///                 // When tapped, it will automatically start the Apple Pay payment flow.
///             }
///         }
///
///     case .failure(let error):
///         print("Unable to setup Apple Pay: \(error)")
///     }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC12PayEngineSDK10PEApplePay")
@interface PEApplePay : NSObject
/// A delegate conforming to the <code>PEApplePayDelegate</code> protocol that handles Apple Pay events.
@property (nonatomic, strong) id <PEApplePayDelegate> _Nullable delegate;
/// Creates and returns a <code>UIButton</code> styled as an Apple Pay button.
/// When the button is tapped, it initiates the Apple Pay authorization flow. Depending on the supported payment network,
/// the button may direct users to set up Apple Pay or proceed with a payment.
/// \param paymentRequest An <code>ApplePayPaymentRequest</code> containing details of the payment request.
///
/// \param type The type of Apple Pay button (e.g., <code>.checkout</code>, <code>.book</code>). Default is <code>.checkout</code>.
///
/// \param style The style of the button (e.g., <code>.black</code>, <code>.white</code>). Default is <code>.black</code>.
///
///
/// returns:
/// A <code>UIButton</code> configured for Apple Pay, or <code>nil</code> if Apple Pay is not available.
- (UIButton * _Nullable)setupApplePayButtonFor:(ApplePayPaymentRequest * _Nonnull)paymentRequest type:(PKPaymentButtonType)type style:(PKPaymentButtonStyle)style SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PKPaymentAuthorizationViewController;
@class PKPaymentMethod;
@class PKPaymentRequestPaymentMethodUpdate;
@class PKContact;
@class PKPaymentRequestShippingContactUpdate;
@class PKPaymentRequestShippingMethodUpdate;
@class PKPayment;

@interface PEApplePay (SWIFT_EXTENSION(PayEngineSDK)) <PKPaymentAuthorizationViewControllerDelegate>
- (void)paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController * _Nonnull)controller;
- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController * _Nonnull)controller didSelectPaymentMethod:(PKPaymentMethod * _Nonnull)paymentMethod handler:(void (^ _Nonnull)(PKPaymentRequestPaymentMethodUpdate * _Nonnull))completion;
- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController * _Nonnull)controller didSelectShippingContact:(PKContact * _Nonnull)contact handler:(void (^ _Nonnull)(PKPaymentRequestShippingContactUpdate * _Nonnull))completion;
- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController * _Nonnull)controller didSelectShippingMethod:(PKShippingMethod * _Nonnull)shippingMethod handler:(void (^ _Nonnull)(PKPaymentRequestShippingMethodUpdate * _Nonnull))completion;
- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController * _Nonnull)controller didAuthorizePayment:(PKPayment * _Nonnull)payment completion:(void (^ _Nonnull)(PKPaymentAuthorizationStatus))completion;
@end

enum PEApplePayResult : NSInteger;

/// A delegate protocol that provides callbacks for various events during the Apple Pay transaction process.
/// This protocol notifies the conforming delegate about errors, UI status updates, payment token retrieval,
/// and optional user interactions such as selecting shipping or payment methods.
SWIFT_PROTOCOL("_TtP12PayEngineSDK18PEApplePayDelegate_")
@protocol PEApplePayDelegate
/// Called when an error occurs during the Apple Pay transaction.
/// \param error The error that occurred.
///
- (void)paymentErrorWithError:(NSError * _Nonnull)error;
/// Called when the Apple Pay payment sheet is dismissed.
/// This can occur when the user cancels the payment request or when the payment is successfully completed.
- (void)paymentSheetDidMDismiss;
/// Called when a payment token is successfully received after Apple Pay authorization.
/// \param token The payment token received from Apple Pay.
///
/// \param metadata Additional metadata related to the transaction, if available.
///
/// \param billingContact The user’s billing contact information.
///
/// \param shippingContact The user’s shipping contact information.
///
/// \param completion A completion handler that must be called with a <code>PEApplePayResult</code> value.
///
- (void)paymentTokenDidReturnWithToken:(NSString * _Nonnull)token metadata:(NSDictionary<NSString *, id> * _Nullable)metadata billingContact:(PKContact * _Nullable)billingContact shippingContact:(PKContact * _Nullable)shippingContact completion:(void (^ _Nonnull)(enum PEApplePayResult))completion;
/// Called when a payment token is unavailable due to an error during token exchange.
/// \param error The error that occurred, if available.
///
- (void)paymentTokenNotAvailableWithError:(NSError * _Nullable)error;
@optional
/// Called when the user selects a shipping contact during checkout.
/// \param contact The selected shipping contact.
///
/// \param completion A handler that must be called with a <code>PKPaymentRequestShippingContactUpdate</code> to update the shipping details.
///
- (void)didSelectShippingContact:(PKContact * _Nonnull)contact handler:(void (^ _Nonnull)(PKPaymentRequestShippingContactUpdate * _Nonnull))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Called when the user selects a shipping method.
/// \param shippingMethod The selected shipping method.
///
/// \param completion A handler that must be called with a <code>PKPaymentRequestShippingMethodUpdate</code> to update the shipping method details.
///
- (void)didSelectShippingMethod:(PKShippingMethod * _Nonnull)shippingMethod handler:(void (^ _Nonnull)(PKPaymentRequestShippingMethodUpdate * _Nonnull))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Called when the user selects a payment method.
/// \param paymentMethod The selected payment method.
///
/// \param completion A handler that must be called with a <code>PKPaymentRequestPaymentMethodUpdate</code> to update the payment method details.
///
- (void)didSelectPaymentMethod:(PKPaymentMethod * _Nonnull)paymentMethod handler:(void (^ _Nonnull)(PKPaymentRequestPaymentMethodUpdate * _Nonnull))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
@end

/// An enum representing the Apple Payment Result’s success or failure.
typedef SWIFT_ENUM(NSInteger, PEApplePayResult, open) {
/// Success if the payment was successful..
  PEApplePayResultSuccess = 0,
/// Failiure if the payment was not successful.
  PEApplePayResultFailure = 1,
};


/// A PayEngine bank account object.
/// This class represents a bank account stored within PayEngine, containing a secure token
/// and account details.
SWIFT_CLASS("_TtC12PayEngineSDK13PEBankAccount")
@interface PEBankAccount : NSObject
/// A unique token representing the bank account.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// The associated bank account details.
@property (nonatomic, readonly, strong) BankAccountData * _Nonnull bankAccountData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A PayEngine card object.
/// This class represents a payment card stored with PayEngine, containing a secure token
/// and associated card details.
SWIFT_CLASS("_TtC12PayEngineSDK6PECard")
@interface PECard : NSObject
/// A unique token representing the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// The associated card details.
@property (nonatomic, readonly, strong) CardData * _Nonnull cardData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class that is used to configure the <code>PayEngine</code> object.
/// This class stores the authentication key that is generated by PayEngine. It also defines the PayEngine’s backend environement which the <code>PayEngine</code> object will interact with.
SWIFT_CLASS("_TtC12PayEngineSDK8PEConfig")
@interface PEConfig : NSObject
/// Constructor for the <code>PEConfig</code> class
/// \param publicKey PayEngine public key.
///
/// \param baseURL Base URL for your custom environemnt. Default is <code>nil</code>. If set as <code>nil</code> the object will setup the environment based on the value of the <code>publicKey</code>.
///
- (nonnull instancetype)initWithPublicKey:(NSString * _Nonnull)publicKey baseURL:(NSString * _Nullable)baseURL OBJC_DESIGNATED_INITIALIZER;
/// Returns the base url with which the <code>PayEngine</code> object interacts with.
///
/// returns:
/// A Base URL. If no url was provided when constructing the object, then this method will return a url based on the <code>publicKey</code> provided in the <code>init(publicKey:baseURL:)</code>
- (NSString * _Nonnull)getBaseURL SWIFT_WARN_UNUSED_RESULT;
/// To check if the environment is set as production.
///
/// returns:
/// Returns <code>true</code> if the environment is set as live. Returns <code>false</code> otherwise.
- (BOOL)isProduction SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A type that represents an input field.
/// This class defines an input field with properties that determine its behavior, such as its name, type, placeholder,
/// whether it is required, keyboard type, and optional validation pattern.
/// Internal UI components use this type to create input fields that adhere to the specified input criteria.
SWIFT_CLASS("_TtC12PayEngineSDK7PEField")
@interface PEField : NSObject
/// The name of the field.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The type of the field.
@property (nonatomic, copy) NSString * _Nonnull type;
/// The placeholder text displayed when the field is empty.
@property (nonatomic, copy) NSString * _Nonnull placeholder;
/// A Boolean value indicating whether the field is required.
/// If <code>true</code>, the field must contain a value before submission.
@property (nonatomic) BOOL isRequired;
/// A regular expression pattern used to validate the field’s input.
/// If <code>nil</code>, no validation is performed.
@property (nonatomic, copy) NSString * _Nullable pattern;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Color Theme for the SDK.
typedef SWIFT_ENUM(NSInteger, PEThemeMode, open) {
  PEThemeModeSystem = 0,
  PEThemeModeDark = 1,
  PEThemeModeLight = 2,
};

@class UIView;
@class ThreeDSResult;

/// <code>PayEngine</code> is the main entry point for integrating PayEngine’s payment processing features.
/// This class provides a centralized interface for:
/// <ul>
///   <li>
///     Secure card and bank account entry
///   </li>
///   <li>
///     Apple Pay integration
///   </li>
///   <li>
///     Fraud monitoring and 3D Secure authentication
///   </li>
/// </ul>
/// <h2>Key Features</h2>
/// <h3>Secure Payment Views</h3>
/// <ul>
///   <li>
///     Supports secure card entry via <code>createSecureView(additionalFields:completion:)</code>
///   </li>
///   <li>
///     Supports secure bank account entry via <code>createBankAccountView(additionalFields:completion:)</code>
///   </li>
///   <li>
///     PCI-compliant data handling with external encryption and tokenization
///   </li>
/// </ul>
/// <h3>Apple Pay Integration</h3>
/// <ul>
///   <li>
///     Detects Apple Pay availability
///   </li>
///   <li>
///     Provides Apple Pay button creation
///   </li>
///   <li>
///     Manages Apple Pay transaction processing
///   </li>
/// </ul>
/// <h3>Fraud Monitoring & 3D Secure</h3>
/// <ul>
///   <li>
///     Creates fraud monitoring sessions via <code>createFraudMonitorSession(merchantId:completion:)</code>
///   </li>
///   <li>
///     Supports 3D Secure authentication via <code>perform3DSFlow(view:threeDSData:handler:)</code>
///   </li>
/// </ul>
/// <h2>Usage Example</h2>
/// \code
/// // Initialize PayEngine
/// let payEngine = PayEngine(config: config)
///
/// // Create a secure card entry view
/// payEngine.createSecureView(additionalFields: []) { result in
///     switch result {
///     case .success(let view):
///         self.view.addSubview(view)
///     case .failure(let error):
///         print("Error: \(error)")
///     }
/// }
///
/// \endcodeseealso:
/// <code>ICardNumberView</code>, <code>IBankAccountView</code>, <code>PEApplePay</code>
SWIFT_CLASS("_TtC12PayEngineSDK9PayEngine")
@interface PayEngine : NSObject
/// Initializes the <code>PayEngine</code> with the given configuration.
/// \param config The configuration object <code>PEConfig</code> containing necessary settings.
///
- (nonnull instancetype)initWithConfig:(PEConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
/// Sets the theme mode for the PayEngine UI components.
/// \param themeMode The desired theme mode <code>PEThemeMode</code>.
///
+ (void)setThemeMode:(enum PEThemeMode)themMode;
/// Creates a secure card entry view for collecting payment details.
/// \param additionalFields Optional additional fields to be included of type <code>PEField</code>.
///
/// \param completion A closure returning the <code>ICardNumberView</code> instance.
///
- (void)createSecureViewWithAdditionalFields:(NSArray<PEField *> * _Nullable)additionalFields completion:(void (^ _Nonnull)(ICardNumberView * _Nonnull))completion;
/// Creates a secure bank account entry view.
/// \param additionalFields Optional additional fields to be included.
///
/// \param completion A closure returning the <code>IBankAccountView</code> instance.
///
- (void)createBankAccountViewWithAdditionalFields:(NSArray<PEField *> * _Nullable)additionalFields completion:(void (^ _Nonnull)(IBankAccountView * _Nonnull))completion;
/// Retrieves browser-related information.
/// \param view The UI view in which the web view is embedded.
///
/// \param handler A closure returning browser details as a <code>String</code>.
///
- (void)getBrowserInfoWithView:(UIView * _Nonnull)view handler:(void (^ _Nonnull)(NSString * _Nonnull))handler;
/// Initiates a 3D Secure authentication process.
/// \param view The UI view in which the 3D Secure flow should be presented.
///
/// \param threeDSData The authentication data required for 3D Secure.
///
/// \param handler A closure returning the <code>ThreeDSResult</code> upon completion.
///
- (void)perform3DSFlowWithView:(UIView * _Nonnull)view threeDSData:(NSString * _Nonnull)threeDSData handler:(void (^ _Nonnull)(ThreeDSResult * _Nonnull))handler;
/// Creates a fraud monitoring session.
/// \param merchantId The merchant’s unique identifier.
///
/// \param completion A closure returning the fraud monitoring session ID as a <code>String</code>.
///
- (void)createFraudMonitorSessionWithMerchantId:(NSString * _Nonnull)merchantId completion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Type that represents the result for the ThreeDS process
SWIFT_CLASS("_TtC12PayEngineSDK13ThreeDSResult")
@interface ThreeDSResult : NSObject
/// The message for the result
@property (nonatomic, readonly, copy) NSString * _Nullable message;
/// Bool indicating whether the transaction was successful or not
@property (nonatomic, readonly) BOOL success;
/// Transaction ID resulting after the ThreeDS Flow completion
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end









#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
