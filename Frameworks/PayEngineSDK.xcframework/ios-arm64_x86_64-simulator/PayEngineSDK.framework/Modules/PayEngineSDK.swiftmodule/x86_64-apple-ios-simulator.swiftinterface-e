// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios12.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PayEngineSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import PassKit
@_exported import PayEngineSDK
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol PEAccessTokenRepresentable {
  var accessToken: Swift.String { get }
  var expiresIn: Swift.Int64 { get }
}
@objc @objcMembers public class PEConfig : ObjectiveC.NSObject {
  @objc public init(publicKey: Swift.String, baseURL: Swift.String? = nil)
  @objc public func getBaseURL() -> Swift.String
  @objc public func isProduction() -> Swift.Bool
  @objc deinit
}
@objc public enum PEThemeMode : Swift.Int {
  case system
  case dark
  case light
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class IBankAccountView : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public func createBankAccount(merchantId: Swift.String?, completion: @escaping (Swift.Result<PayEngineSDK.PEBankAccount, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func createBankAccount(merchantId: Swift.String?, additionalData: [Swift.String : Any], completion: @escaping (Swift.Result<PayEngineSDK.PEBankAccount, any Swift.Error>) -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency public func createBankAccount(merchantId: Swift.String?, additionalData: [Swift.String : Any], completion: @escaping (PayEngineSDK.PEBankAccount) -> Swift.Void, failure: @escaping (any Swift.Error) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func validate() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func showKeyboard()
  @_Concurrency.MainActor @preconcurrency public func hideKeyboard()
  @_Concurrency.MainActor @preconcurrency public func detectSizeChanges(onChange: @escaping (CoreFoundation.CGSize) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PEApplePay : ObjectiveC.NSObject {
  @objc public var delegate: (any PayEngineSDK.PEApplePayDelegate)?
  public func applePayStatus(for paymentNetworks: [PayEngineSDK.ApplePayPaymentNetwork] = []) -> PayEngineSDK.ApplePayStatus
  @objc public func setupApplePayButton(for paymentRequest: PayEngineSDK.ApplePayPaymentRequest, type: PassKit.PKPaymentButtonType = .checkout, style: PassKit.PKPaymentButtonStyle = .black) -> UIKit.UIButton?
  @objc deinit
}
extension PayEngineSDK.PEApplePay : PassKit.PKPaymentAuthorizationViewControllerDelegate {
  @objc dynamic public func paymentAuthorizationViewControllerDidFinish(_ controller: PassKit.PKPaymentAuthorizationViewController)
  @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didSelect paymentMethod: PassKit.PKPaymentMethod, handler completion: @escaping (PassKit.PKPaymentRequestPaymentMethodUpdate) -> Swift.Void)
  @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didSelectShippingContact contact: PassKit.PKContact, handler completion: @escaping (PassKit.PKPaymentRequestShippingContactUpdate) -> Swift.Void)
  @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didSelect shippingMethod: PassKit.PKShippingMethod, handler completion: @escaping (PassKit.PKPaymentRequestShippingMethodUpdate) -> Swift.Void)
  @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didAuthorizePayment payment: PassKit.PKPayment, completion: @escaping (PassKit.PKPaymentAuthorizationStatus) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ThreeDSResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let message: Swift.String?
  @objc final public let success: Swift.Bool
  @objc final public let transactionId: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BankAccountData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let routingNumber: Swift.String
  @objc final public let last4: Swift.String
  @objc final public let firstName: Swift.String
  @objc final public let lastName: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PEBankAccount : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let token: Swift.String
  @objc final public let bankAccountData: PayEngineSDK.BankAccountData
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class PEField : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var type: Swift.String
  @objc public var placeholder: Swift.String
  @objc public var isRequired: Swift.Bool
  public var keyboardType: PayEngineSDK.PEKeyboardType
  @objc public var pattern: Swift.String?
  public init(name: Swift.String, type: Swift.String, placeholder: Swift.String, isRequired: Swift.Bool, keyboardType: PayEngineSDK.PEKeyboardType = .normal, pattern: Swift.String?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CardData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let brand: Swift.String
  @objc final public let last4: Swift.String
  @objc final public let expMonth: Swift.Int
  @objc final public let expYear: Swift.Int
  @objc final public let name: Swift.String
  @objc final public let addressZip: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PECard : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let token: Swift.String
  @objc final public let cardData: PayEngineSDK.CardData
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum ApplePayStatus : Swift.Int {
  case eligible
  case needSetup
  case notEligible
  public func ApplePayStatusRawValue() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ApplePayPaymentRequest : ObjectiveC.NSObject {
  @objc public func build(paymentItems: [PassKit.PKPaymentSummaryItem] = [], paymentAmount: Swift.Double, currencyCode: Swift.String = "USD", requiredBillingContactFields: Swift.Set<PassKit.PKContactField> = [], requiredShippingContactFields: Swift.Set<PassKit.PKContactField> = [], shippingMethods: [PassKit.PKShippingMethod] = [])
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PEApplePayResult : Swift.Int {
  case success
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class PayEngine : ObjectiveC.NSObject {
  @objc public init(config: PayEngineSDK.PEConfig)
  @objc public static func setThemeMode(_ themMode: PayEngineSDK.PEThemeMode)
  @objc public func createSecureView(additionalFields: [PayEngineSDK.PEField]?, completion: @escaping (PayEngineSDK.ICardNumberView) -> Swift.Void)
  @objc public func createBankAccountView(additionalFields: [PayEngineSDK.PEField]?, completion: @escaping (PayEngineSDK.IBankAccountView) -> Swift.Void)
  @objc public func getBrowserInfo(view: UIKit.UIView, handler: @escaping (_ data: Swift.String) -> Swift.Void)
  @objc public func perform3DSFlow(view: UIKit.UIView, threeDSData: Swift.String, handler: @escaping (_ data: PayEngineSDK.ThreeDSResult) -> Swift.Void)
  @objc public func createFraudMonitorSession(merchantId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  public func createFraudMonitorSession(_ merchantId: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  public func registerFraudMonitorBackgroundTask()
  public func createSecureView(additionalFields: [PayEngineSDK.PEField]?, completion: @escaping (Swift.Result<PayEngineSDK.ICardNumberView, any Swift.Error>) -> Swift.Void)
  public func createBankAccountView(additionalFields: [PayEngineSDK.PEField]?, completion: @escaping (Swift.Result<PayEngineSDK.IBankAccountView, any Swift.Error>) -> Swift.Void)
  public func setupApplePay(merchantId: Swift.String, completion: @escaping (Swift.Result<PayEngineSDK.PEApplePay, any Swift.Error>) -> Swift.Void)
  public class func getCurrentVersionString() -> Swift.String?
  @objc deinit
}
extension PayEngineSDK.PayEngine {
  public static func setFetchAccessTokenCallback(_ callback: @escaping (() throws -> any PayEngineSDK.PEAccessTokenRepresentable))
  public static func logout()
}
public enum PEKeyboardType {
  case number
  case alphabet
  case phone
  case normal
  public static func == (a: PayEngineSDK.PEKeyboardType, b: PayEngineSDK.PEKeyboardType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum ApplePayPaymentNetwork : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  public typealias AllCases = [PayEngineSDK.ApplePayPaymentNetwork]
  public static var allCases: PayEngineSDK.ApplePayPaymentNetwork.AllCases {
    get
  }
  case Amex
  case CartesBancaires
  case Discover
  case Eftpos
  case Electron
  @available(iOS 12.1.1, *)
  case Elo
  case idCredit
  case Interac
  case JCB
  @available(iOS 12.1.1, *)
  case Mada
  case Maestro
  case MasterCard
  case PrivateLabel
  case QuicPay
  case Suica
  case Visa
  case VPay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: PayEngineSDK.ApplePayPaymentNetwork.RawValue {
    get
  }
}
@objc public protocol PEApplePayDelegate {
  @objc func paymentError(error: any Swift.Error)
  @objc func paymentSheetDidMDismiss()
  @objc func paymentTokenDidReturn(token: Swift.String, metadata: [Swift.String : Any]?, billingContact: PassKit.PKContact?, shippingContact: PassKit.PKContact?, completion: @escaping (PayEngineSDK.PEApplePayResult) -> Swift.Void)
  @objc func paymentTokenNotAvailable(error: (any Swift.Error)?)
  @available(iOS 11.0, *)
  @objc optional func didSelectShippingContact(_ contact: PassKit.PKContact, handler completion: @escaping (PassKit.PKPaymentRequestShippingContactUpdate) -> Swift.Void)
  @available(iOS 11.0, *)
  @objc optional func didSelectShippingMethod(_ shippingMethod: PassKit.PKShippingMethod, handler completion: @escaping (PassKit.PKPaymentRequestShippingMethodUpdate) -> Swift.Void)
  @available(iOS 11.0, *)
  @objc optional func didSelectPaymentMethod(_ paymentMethod: PassKit.PKPaymentMethod, handler completion: @escaping (PassKit.PKPaymentRequestPaymentMethodUpdate) -> Swift.Void)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func pinEdges(to view: UIKit.UIView)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func pinEdgesTo(to other: UIKit.UIView)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class ICardNumberView : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public func createCard(merchantId: Swift.String?, completion: @escaping (Swift.Result<PayEngineSDK.PECard, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func createCard(merchantId: Swift.String?, additionalData: [Swift.String : Any], completion: @escaping (Swift.Result<PayEngineSDK.PECard, any Swift.Error>) -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency public func createCard(merchantId: Swift.String?, additionalData: [Swift.String : Any], completion: @escaping (PayEngineSDK.PECard) -> Swift.Void, failure: @escaping (any Swift.Error) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func validate() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func showKeyboard()
  @_Concurrency.MainActor @preconcurrency public func hideKeyboard()
  @_Concurrency.MainActor @preconcurrency public func detectSizeChanges(onChange: @escaping (CoreFoundation.CGSize) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayEngineSDK.PEThemeMode : Swift.Equatable {}
extension PayEngineSDK.PEThemeMode : Swift.Hashable {}
extension PayEngineSDK.PEThemeMode : Swift.RawRepresentable {}
extension PayEngineSDK.ApplePayStatus : Swift.Equatable {}
extension PayEngineSDK.ApplePayStatus : Swift.Hashable {}
extension PayEngineSDK.ApplePayStatus : Swift.RawRepresentable {}
extension PayEngineSDK.PEApplePayResult : Swift.Equatable {}
extension PayEngineSDK.PEApplePayResult : Swift.Hashable {}
extension PayEngineSDK.PEApplePayResult : Swift.RawRepresentable {}
extension PayEngineSDK.PEKeyboardType : Swift.Equatable {}
extension PayEngineSDK.PEKeyboardType : Swift.Hashable {}
extension PayEngineSDK.ApplePayPaymentNetwork : Swift.Equatable {}
extension PayEngineSDK.ApplePayPaymentNetwork : Swift.Hashable {}
